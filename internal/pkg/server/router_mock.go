// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package server

import (
	"github.com/gorilla/mux"
	"net/http"
	"sync"
)

var (
	lockRouterMockHandle    sync.RWMutex
	lockRouterMockMethods   sync.RWMutex
	lockRouterMockServeHTTP sync.RWMutex
)

// RouterMock is a mock implementation of Router.
//
//     func TestSomethingThatUsesRouter(t *testing.T) {
//
//         // make and configure a mocked Router
//         mockedRouter := &RouterMock{
//             HandleFunc: func(path string, handler http.Handler) *mux.Route {
// 	               panic("mock out the Handle method")
//             },
//             MethodsFunc: func(methods ...string) *mux.Route {
// 	               panic("mock out the Methods method")
//             },
//             ServeHTTPFunc: func(w http.ResponseWriter, r *http.Request)  {
// 	               panic("mock out the ServeHTTP method")
//             },
//         }
//
//         // use mockedRouter in code that requires Router
//         // and then make assertions.
//
//     }
type RouterMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(path string, handler http.Handler) *mux.Route

	// MethodsFunc mocks the Methods method.
	MethodsFunc func(methods ...string) *mux.Route

	// ServeHTTPFunc mocks the ServeHTTP method.
	ServeHTTPFunc func(w http.ResponseWriter, r *http.Request)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Path is the path argument value.
			Path string
			// Handler is the handler argument value.
			Handler http.Handler
		}
		// Methods holds details about calls to the Methods method.
		Methods []struct {
			// Methods is the methods argument value.
			Methods []string
		}
		// ServeHTTP holds details about calls to the ServeHTTP method.
		ServeHTTP []struct {
			// W is the w argument value.
			W http.ResponseWriter
			// R is the r argument value.
			R *http.Request
		}
	}
}

// Handle calls HandleFunc.
func (mock *RouterMock) Handle(path string, handler http.Handler) *mux.Route {
	if mock.HandleFunc == nil {
		panic("RouterMock.HandleFunc: method is nil but Router.Handle was just called")
	}
	callInfo := struct {
		Path    string
		Handler http.Handler
	}{
		Path:    path,
		Handler: handler,
	}
	lockRouterMockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	lockRouterMockHandle.Unlock()
	return mock.HandleFunc(path, handler)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedRouter.HandleCalls())
func (mock *RouterMock) HandleCalls() []struct {
	Path    string
	Handler http.Handler
} {
	var calls []struct {
		Path    string
		Handler http.Handler
	}
	lockRouterMockHandle.RLock()
	calls = mock.calls.Handle
	lockRouterMockHandle.RUnlock()
	return calls
}

// Methods calls MethodsFunc.
func (mock *RouterMock) Methods(methods ...string) *mux.Route {
	if mock.MethodsFunc == nil {
		panic("RouterMock.MethodsFunc: method is nil but Router.Methods was just called")
	}
	callInfo := struct {
		Methods []string
	}{
		Methods: methods,
	}
	lockRouterMockMethods.Lock()
	mock.calls.Methods = append(mock.calls.Methods, callInfo)
	lockRouterMockMethods.Unlock()
	return mock.MethodsFunc(methods...)
}

// MethodsCalls gets all the calls that were made to Methods.
// Check the length with:
//     len(mockedRouter.MethodsCalls())
func (mock *RouterMock) MethodsCalls() []struct {
	Methods []string
} {
	var calls []struct {
		Methods []string
	}
	lockRouterMockMethods.RLock()
	calls = mock.calls.Methods
	lockRouterMockMethods.RUnlock()
	return calls
}

// ServeHTTP calls ServeHTTPFunc.
func (mock *RouterMock) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if mock.ServeHTTPFunc == nil {
		panic("RouterMock.ServeHTTPFunc: method is nil but Router.ServeHTTP was just called")
	}
	callInfo := struct {
		W http.ResponseWriter
		R *http.Request
	}{
		W: w,
		R: r,
	}
	lockRouterMockServeHTTP.Lock()
	mock.calls.ServeHTTP = append(mock.calls.ServeHTTP, callInfo)
	lockRouterMockServeHTTP.Unlock()
	mock.ServeHTTPFunc(w, r)
}

// ServeHTTPCalls gets all the calls that were made to ServeHTTP.
// Check the length with:
//     len(mockedRouter.ServeHTTPCalls())
func (mock *RouterMock) ServeHTTPCalls() []struct {
	W http.ResponseWriter
	R *http.Request
} {
	var calls []struct {
		W http.ResponseWriter
		R *http.Request
	}
	lockRouterMockServeHTTP.RLock()
	calls = mock.calls.ServeHTTP
	lockRouterMockServeHTTP.RUnlock()
	return calls
}
