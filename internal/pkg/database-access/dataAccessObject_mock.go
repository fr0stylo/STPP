// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database_access

import (
	"sync"
)

var (
	lockDataAccessObjectMockDelete   sync.RWMutex
	lockDataAccessObjectMockFindAll  sync.RWMutex
	lockDataAccessObjectMockFindById sync.RWMutex
	lockDataAccessObjectMockInsert   sync.RWMutex
	lockDataAccessObjectMockUpdate   sync.RWMutex
)

// DataAccessObjectMock is a mock implementation of DataAccessObject.
//
//     func TestSomethingThatUsesDataAccessObject(t *testing.T) {
//
//         // make and configure a mocked DataAccessObject
//         mockedDataAccessObject := &DataAccessObjectMock{
//             DeleteFunc: func(id string) error {
// 	               panic("mock out the Delete method")
//             },
//             FindAllFunc: func() (interface{}, error) {
// 	               panic("mock out the FindAll method")
//             },
//             FindByIdFunc: func(id string) (interface{}, error) {
// 	               panic("mock out the FindById method")
//             },
//             InsertFunc: func(entry interface{}) error {
// 	               panic("mock out the Insert method")
//             },
//             UpdateFunc: func(entry interface{}) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedDataAccessObject in code that requires DataAccessObject
//         // and then make assertions.
//
//     }
type DataAccessObjectMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id string) error

	// FindAllFunc mocks the FindAll method.
	FindAllFunc func() (interface{}, error)

	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(id string) (interface{}, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(entry interface{}) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(entry interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID string
		}
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
		}
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// ID is the id argument value.
			ID string
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Entry is the entry argument value.
			Entry interface{}
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Entry is the entry argument value.
			Entry interface{}
		}
	}
}

// Delete calls DeleteFunc.
func (mock *DataAccessObjectMock) Delete(id string) error {
	if mock.DeleteFunc == nil {
		panic("DataAccessObjectMock.DeleteFunc: method is nil but DataAccessObject.Delete was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockDataAccessObjectMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockDataAccessObjectMockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedDataAccessObject.DeleteCalls())
func (mock *DataAccessObjectMock) DeleteCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockDataAccessObjectMockDelete.RLock()
	calls = mock.calls.Delete
	lockDataAccessObjectMockDelete.RUnlock()
	return calls
}

// FindAll calls FindAllFunc.
func (mock *DataAccessObjectMock) FindAll() (interface{}, error) {
	if mock.FindAllFunc == nil {
		panic("DataAccessObjectMock.FindAllFunc: method is nil but DataAccessObject.FindAll was just called")
	}
	callInfo := struct {
	}{}
	lockDataAccessObjectMockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	lockDataAccessObjectMockFindAll.Unlock()
	return mock.FindAllFunc()
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//     len(mockedDataAccessObject.FindAllCalls())
func (mock *DataAccessObjectMock) FindAllCalls() []struct {
} {
	var calls []struct {
	}
	lockDataAccessObjectMockFindAll.RLock()
	calls = mock.calls.FindAll
	lockDataAccessObjectMockFindAll.RUnlock()
	return calls
}

// FindById calls FindByIdFunc.
func (mock *DataAccessObjectMock) FindById(id string) (interface{}, error) {
	if mock.FindByIdFunc == nil {
		panic("DataAccessObjectMock.FindByIdFunc: method is nil but DataAccessObject.FindById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockDataAccessObjectMockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	lockDataAccessObjectMockFindById.Unlock()
	return mock.FindByIdFunc(id)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//     len(mockedDataAccessObject.FindByIdCalls())
func (mock *DataAccessObjectMock) FindByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockDataAccessObjectMockFindById.RLock()
	calls = mock.calls.FindById
	lockDataAccessObjectMockFindById.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *DataAccessObjectMock) Insert(entry interface{}) error {
	if mock.InsertFunc == nil {
		panic("DataAccessObjectMock.InsertFunc: method is nil but DataAccessObject.Insert was just called")
	}
	callInfo := struct {
		Entry interface{}
	}{
		Entry: entry,
	}
	lockDataAccessObjectMockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	lockDataAccessObjectMockInsert.Unlock()
	return mock.InsertFunc(entry)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedDataAccessObject.InsertCalls())
func (mock *DataAccessObjectMock) InsertCalls() []struct {
	Entry interface{}
} {
	var calls []struct {
		Entry interface{}
	}
	lockDataAccessObjectMockInsert.RLock()
	calls = mock.calls.Insert
	lockDataAccessObjectMockInsert.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DataAccessObjectMock) Update(entry interface{}) error {
	if mock.UpdateFunc == nil {
		panic("DataAccessObjectMock.UpdateFunc: method is nil but DataAccessObject.Update was just called")
	}
	callInfo := struct {
		Entry interface{}
	}{
		Entry: entry,
	}
	lockDataAccessObjectMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockDataAccessObjectMockUpdate.Unlock()
	return mock.UpdateFunc(entry)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedDataAccessObject.UpdateCalls())
func (mock *DataAccessObjectMock) UpdateCalls() []struct {
	Entry interface{}
} {
	var calls []struct {
		Entry interface{}
	}
	lockDataAccessObjectMockUpdate.RLock()
	calls = mock.calls.Update
	lockDataAccessObjectMockUpdate.RUnlock()
	return calls
}
