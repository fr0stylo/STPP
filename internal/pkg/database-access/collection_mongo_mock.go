// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database_access

import (
	"sync"
)

var (
	lockCollectionMockFind     sync.RWMutex
	lockCollectionMockFindId   sync.RWMutex
	lockCollectionMockInsert   sync.RWMutex
	lockCollectionMockRemove   sync.RWMutex
	lockCollectionMockUpdate   sync.RWMutex
	lockCollectionMockUpdateId sync.RWMutex
)

// CollectionMock is a mock implementation of Collection.
//
//     func TestSomethingThatUsesCollection(t *testing.T) {
//
//         // make and configure a mocked Collection
//         mockedCollection := &CollectionMock{
//             FindFunc: func(query interface{}) Query {
// 	               panic("mock out the Find method")
//             },
//             FindIdFunc: func(id interface{}) Query {
// 	               panic("mock out the FindId method")
//             },
//             InsertFunc: func(docs ...interface{}) error {
// 	               panic("mock out the Insert method")
//             },
//             RemoveFunc: func(selector interface{}) error {
// 	               panic("mock out the Remove method")
//             },
//             UpdateFunc: func(selector interface{}, update interface{}) error {
// 	               panic("mock out the Update method")
//             },
//             UpdateIdFunc: func(id interface{}, update interface{}) error {
// 	               panic("mock out the UpdateId method")
//             },
//         }
//
//         // use mockedCollection in code that requires Collection
//         // and then make assertions.
//
//     }
type CollectionMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(query interface{}) Query

	// FindIdFunc mocks the FindId method.
	FindIdFunc func(id interface{}) Query

	// InsertFunc mocks the Insert method.
	InsertFunc func(docs ...interface{}) error

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(selector interface{}) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(selector interface{}, update interface{}) error

	// UpdateIdFunc mocks the UpdateId method.
	UpdateIdFunc func(id interface{}, update interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Query is the query argument value.
			Query interface{}
		}
		// FindId holds details about calls to the FindId method.
		FindId []struct {
			// ID is the id argument value.
			ID interface{}
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Docs is the docs argument value.
			Docs []interface{}
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Selector is the selector argument value.
			Selector interface{}
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Selector is the selector argument value.
			Selector interface{}
			// Update is the update argument value.
			Update interface{}
		}
		// UpdateId holds details about calls to the UpdateId method.
		UpdateId []struct {
			// ID is the id argument value.
			ID interface{}
			// Update is the update argument value.
			Update interface{}
		}
	}
}

// Find calls FindFunc.
func (mock *CollectionMock) Find(query interface{}) Query {
	if mock.FindFunc == nil {
		panic("CollectionMock.FindFunc: method is nil but Collection.Find was just called")
	}
	callInfo := struct {
		Query interface{}
	}{
		Query: query,
	}
	lockCollectionMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockCollectionMockFind.Unlock()
	return mock.FindFunc(query)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedCollection.FindCalls())
func (mock *CollectionMock) FindCalls() []struct {
	Query interface{}
} {
	var calls []struct {
		Query interface{}
	}
	lockCollectionMockFind.RLock()
	calls = mock.calls.Find
	lockCollectionMockFind.RUnlock()
	return calls
}

// FindId calls FindIdFunc.
func (mock *CollectionMock) FindId(id interface{}) Query {
	if mock.FindIdFunc == nil {
		panic("CollectionMock.FindIdFunc: method is nil but Collection.FindId was just called")
	}
	callInfo := struct {
		ID interface{}
	}{
		ID: id,
	}
	lockCollectionMockFindId.Lock()
	mock.calls.FindId = append(mock.calls.FindId, callInfo)
	lockCollectionMockFindId.Unlock()
	return mock.FindIdFunc(id)
}

// FindIdCalls gets all the calls that were made to FindId.
// Check the length with:
//     len(mockedCollection.FindIdCalls())
func (mock *CollectionMock) FindIdCalls() []struct {
	ID interface{}
} {
	var calls []struct {
		ID interface{}
	}
	lockCollectionMockFindId.RLock()
	calls = mock.calls.FindId
	lockCollectionMockFindId.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *CollectionMock) Insert(docs ...interface{}) error {
	if mock.InsertFunc == nil {
		panic("CollectionMock.InsertFunc: method is nil but Collection.Insert was just called")
	}
	callInfo := struct {
		Docs []interface{}
	}{
		Docs: docs,
	}
	lockCollectionMockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	lockCollectionMockInsert.Unlock()
	return mock.InsertFunc(docs...)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedCollection.InsertCalls())
func (mock *CollectionMock) InsertCalls() []struct {
	Docs []interface{}
} {
	var calls []struct {
		Docs []interface{}
	}
	lockCollectionMockInsert.RLock()
	calls = mock.calls.Insert
	lockCollectionMockInsert.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *CollectionMock) Remove(selector interface{}) error {
	if mock.RemoveFunc == nil {
		panic("CollectionMock.RemoveFunc: method is nil but Collection.Remove was just called")
	}
	callInfo := struct {
		Selector interface{}
	}{
		Selector: selector,
	}
	lockCollectionMockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	lockCollectionMockRemove.Unlock()
	return mock.RemoveFunc(selector)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedCollection.RemoveCalls())
func (mock *CollectionMock) RemoveCalls() []struct {
	Selector interface{}
} {
	var calls []struct {
		Selector interface{}
	}
	lockCollectionMockRemove.RLock()
	calls = mock.calls.Remove
	lockCollectionMockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CollectionMock) Update(selector interface{}, update interface{}) error {
	if mock.UpdateFunc == nil {
		panic("CollectionMock.UpdateFunc: method is nil but Collection.Update was just called")
	}
	callInfo := struct {
		Selector interface{}
		Update   interface{}
	}{
		Selector: selector,
		Update:   update,
	}
	lockCollectionMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCollectionMockUpdate.Unlock()
	return mock.UpdateFunc(selector, update)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCollection.UpdateCalls())
func (mock *CollectionMock) UpdateCalls() []struct {
	Selector interface{}
	Update   interface{}
} {
	var calls []struct {
		Selector interface{}
		Update   interface{}
	}
	lockCollectionMockUpdate.RLock()
	calls = mock.calls.Update
	lockCollectionMockUpdate.RUnlock()
	return calls
}

// UpdateId calls UpdateIdFunc.
func (mock *CollectionMock) UpdateId(id interface{}, update interface{}) error {
	if mock.UpdateIdFunc == nil {
		panic("CollectionMock.UpdateIdFunc: method is nil but Collection.UpdateId was just called")
	}
	callInfo := struct {
		ID     interface{}
		Update interface{}
	}{
		ID:     id,
		Update: update,
	}
	lockCollectionMockUpdateId.Lock()
	mock.calls.UpdateId = append(mock.calls.UpdateId, callInfo)
	lockCollectionMockUpdateId.Unlock()
	return mock.UpdateIdFunc(id, update)
}

// UpdateIdCalls gets all the calls that were made to UpdateId.
// Check the length with:
//     len(mockedCollection.UpdateIdCalls())
func (mock *CollectionMock) UpdateIdCalls() []struct {
	ID     interface{}
	Update interface{}
} {
	var calls []struct {
		ID     interface{}
		Update interface{}
	}
	lockCollectionMockUpdateId.RLock()
	calls = mock.calls.UpdateId
	lockCollectionMockUpdateId.RUnlock()
	return calls
}
