// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database_access

import (
	"sync"
)

var (
	lockSessionMockClose sync.RWMutex
	lockSessionMockDB    sync.RWMutex
)

// SessionMock is a mock implementation of Session.
//
//     func TestSomethingThatUsesSession(t *testing.T) {
//
//         // make and configure a mocked Session
//         mockedSession := &SessionMock{
//             CloseFunc: func()  {
// 	               panic("mock out the Close method")
//             },
//             DBFunc: func(name string) DataLayer {
// 	               panic("mock out the DB method")
//             },
//         }
//
//         // use mockedSession in code that requires Session
//         // and then make assertions.
//
//     }
type SessionMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// DBFunc mocks the DB method.
	DBFunc func(name string) DataLayer

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// DB holds details about calls to the DB method.
		DB []struct {
			// Name is the name argument value.
			Name string
		}
	}
}

// Close calls CloseFunc.
func (mock *SessionMock) Close() {
	if mock.CloseFunc == nil {
		panic("SessionMock.CloseFunc: method is nil but Session.Close was just called")
	}
	callInfo := struct {
	}{}
	lockSessionMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockSessionMockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedSession.CloseCalls())
func (mock *SessionMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockSessionMockClose.RLock()
	calls = mock.calls.Close
	lockSessionMockClose.RUnlock()
	return calls
}

// DB calls DBFunc.
func (mock *SessionMock) DB(name string) DataLayer {
	if mock.DBFunc == nil {
		panic("SessionMock.DBFunc: method is nil but Session.DB was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockSessionMockDB.Lock()
	mock.calls.DB = append(mock.calls.DB, callInfo)
	lockSessionMockDB.Unlock()
	return mock.DBFunc(name)
}

// DBCalls gets all the calls that were made to DB.
// Check the length with:
//     len(mockedSession.DBCalls())
func (mock *SessionMock) DBCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockSessionMockDB.RLock()
	calls = mock.calls.DB
	lockSessionMockDB.RUnlock()
	return calls
}
